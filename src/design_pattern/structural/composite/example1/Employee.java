package design_pattern.structural.composite.example1;

import java.util.ArrayList;
import java.util.List;

/*
 * Composite Pattern lÃ  má»™t máº«u cáº¥u trÃºc (Structural Pattern).
 * Composite Pattern cho phÃ©p tÆ°Æ¡ng tÃ¡c vá»›i táº¥t cáº£ cÃ¡c Ä‘á»‘i tÆ°á»£ng 
 * tÆ°Æ¡ng tá»± nhau giá»‘ng nhÆ° lÃ  cÃ¡c Ä‘á»‘i tÆ°á»£ng Ä‘Æ¡n hoáº·c collections.
 * 
 * VÃ­ dá»¥: Ä?á»‘i tÆ°á»£ng File sáº½ lÃ  1 Ä‘á»‘i tÆ°á»£ng Ä‘Æ¡n náº¿u bÃªn trong nÃ³ 
 * khÃ´ng cÃ³ file nÃ o khÃ¡c, nhÆ°ng Ä‘á»‘i tÆ°á»£ng file sáº½ Ä‘Æ°á»£c Ä‘á»‘i xá»­ 
 * giá»‘ng nhÆ° 1 collections náº¿u bÃªn trong nÃ³ láº¡i cÃ³ nhá»¯ng File khÃ¡c.
 * 
 * Khi tÃ­nh kÃ­ch thÆ°á»›c cá»§a File ta sáº½ cáº§n tÃ­nh kÃ­ch thÆ°á»›c cá»§a 
 * táº¥t cáº£ cÃ¡c file bÃªn trong nÃ³.
 * 
 * VÃ­ dá»¥ dÆ°á»›i: Trong lá»›p Employee láº¡i cÃ³ 1 field cÅ©ng cÃ³ kiá»ƒu
 * lÃ  Employee (thá»±c cháº¥t lÃ  1 list cÃ¡c object Employee).
 * Use the Employee class to create and print employee hierarchy
 */
public class Employee {
	private String name;
	private String dept;
	private int salary;
	private List<Employee> subordinates;

	// constructor
	public Employee(String name, String dept, int sal) {
		this.name = name;
		this.dept = dept;
		this.salary = sal;
		subordinates = new ArrayList<Employee>();
	}

	public void add(Employee e) {
		subordinates.add(e);
	}

	public void remove(Employee e) {
		subordinates.remove(e);
	}

	public List<Employee> getSubordinates() {
		return subordinates;
	}

	public String toString() {
		return ("[ Name : " + name + ", dept : " + dept + ", salary :" + salary + " ]");
	}
}
